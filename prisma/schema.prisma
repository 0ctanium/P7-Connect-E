generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())

  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())

  groups GroupMember[] @relation("GroupMember")
  invitedMembers GroupMember[] @relation("MemberAssignedBy")
  posts         Post[]
}

model Group {
  id            String    @id @default(cuid())

  name          String
  description   String?
  privacy       GroupPrivacy
  official       Boolean @default(false)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())

  archived      Boolean  @default(false)

  // Permissions
  onlyAdminCanPublish   Boolean @default(false)
  postNeedToBeApproved  Boolean @default(false)
  everyOneCanApproveMembers Boolean @default(true)

  banner    String?

  members GroupMember[]
  posts   Post[]
}

model GroupMember {
  role          Role        @default(USER)

  group         Group       @relation(fields: [groupId], references: [id])
  groupId       String

  user          User        @relation(name: "GroupMember", fields: [userId], references: [id])
  userId        String

  assignedAt    DateTime    @default(now())
  assignedById  String
  assignedBy    User        @relation(name: "MemberAssignedBy", fields: [assignedById], references: [id])

  @@id([groupId, userId])
  @@unique([groupId, userId])
}

model Post {
  id            String    @id @default(cuid())

  author        User        @relation(fields: [authorId], references: [id])
  authorId      String

  group         Group       @relation(fields: [groupId], references: [id])
  groupId       String

  media         String[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
}

// model Media {
//   id            String    @id @default(cuid())
//
//   mimeType  String
//   url       String
//   ecoding   String
//
//   addedBy        User        @relation(fields: [addedById], references: [id])
//   addedById      String
//
//   // Relations
//   post           Post?        @relation(fields: [postId], references: [id])
//   postId         String?
//
//   group           Group?        @relation(fields: [groupId], references: [id])
//   groupId         String?
//
//   createdAt     DateTime  @default(now())
//   updatedAt     DateTime  @default(now())
// }



enum GroupPrivacy {
  OPEN // Everyone can see and join the group
  CLOSED // Everyone can see the group. But only members can see posts
  SECRET // Only members can see the group and
}

enum Role {
  USER
  MODERATOR
  ADMIN
}
