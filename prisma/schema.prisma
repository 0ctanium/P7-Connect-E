generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@unique([identifier, token])
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          Role       @default(USER)
  hash          String?
  salt          String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now())
  accounts      Account[]
  medias        Media[]
  posts         Post[]
  reactions     Reaction[]
  sessions      Session[]
}

model Group {
  id          String   @id @default(cuid())
  name        String
  description String?
  banner      String?
  // priority    Int      @default(1)
  restricted  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  posts       Post[]
}

model Post {
  id        String     @id @default(cuid())
  text      String
  authorId  String
  groupId   String
  parentId  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
  author    User       @relation(fields: [authorId], references: [id])
  group     Group      @relation(fields: [groupId], references: [id])
  parent    Post?      @relation("Replies", fields: [parentId], references: [id])
  medias    Media[]
  replies   Post[]     @relation("Replies")
  reactions Reaction[]
}

model Reaction {
  id        String   @id @default(cuid())
  icon      String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}

model Media {
  id        String   @id @default(cuid())
  mimeType  String
  encoding  String
  url       String
  addedById String
  postId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  addedBy   User     @relation(fields: [addedById], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
}

enum Role {
  USER
  MODERATOR
  ADMIN
}
